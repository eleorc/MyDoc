PV=page view
TPS=transactions per second
QPS=queries per second
RPS=requests per second

RPS=并发数/平均响应时间

http://blog.csdn.net/wind19/article/details/8600083

一．系统吞度量要素：
一个系统的吞度量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联。
系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间
(1)QPS（TPS）：每秒钟request/事务 数量
(2)并发数：系统同时处理的request/事务数
(3)响应时间：一般取平均响应时间
QPS（TPS）= 并发数/平均响应时间 或者 并发数 = QPS*平均响应时间
解读：1000个并发请求，平均需要1秒处理时间，那么QPS=1000。如果需要两秒钟，那么QPS=500.
        一个典型的上班签到系统，早上8点上班，7点半到8点的30分钟的时间里用户会登录签到系统进行签到。
		公司员工为1000人，平均每个员上登录签到系统的时长为5分钟。可以用下面的方法计算。
		QPS = 1000/(30*60) 事务/秒 = 0.56
		平均响应时间为 = 5*60  秒 = 300s
		并发数= QPS*平均响应时间 = 0.56 * 300 = 166.7
	注意：这里的并发数计算的是300秒内的并发数。qps反应了1秒内的并发数。
	在这个场景下，事务的总量以及处理这些事务的响应时间都是由业务场景确定的。由业务场景确定了qps，实际上是反应了业务对于系统处理能力的需求。
一个系统吞吐量通常由QPS（TPS）、并发数两个因素决定（这两个指标是系统性能的体现，可通过工具得到量化结果）。
每套系统这两个值都有一个相对极限值，在应用场景访问压力下，只要某一项达到系统最高值，系统的吞吐量就上不去了，
如果压力继续增大，系统的吞吐量反而会下降，原因是系统超负荷工作，上下文切换、内存等等其它消耗导致系统性能下降。

真正决定qps的是单个事务的系统响应时间。
我们做项目要排计划，可以多人同时并发做多项任务，也可以一个人或者多个人串行工作，始终会有一条关键路径，这条路径需要的时间就是项目的工期。
系统一次调用的响应时间跟项目计划一样，也有一条关键路径，这个关键路径需要的时间是就是系统影响时间
关键路径的时间是有CPU运算、IO、外部系统响应等等组成	

二．系统吞吐量评估


三、软件性能的关注点
1 用户关注点
对于用户来说，当点击一个按钮、链接或发出一条指令开始，到系统把结果已用户感知的形式展现出来为止，这个过程所消耗的时间是用户对这个软件性能的直观印象。
也就是我们所说的响应时间，当相应时间较小时，用户体验是很好的，当然用户体验的响应时间包括个人主观因素和客观响应时间，
在设计软件时，我们就需要考虑到如何更好地结合这两部分达到用户最佳的体验。
2 系统管理员的角度考虑需要关注的性能点
  响应时间
  服务器资源使用情况是否合理
  应用服务器和数据库资源使用是否合理
  系统能否实现扩展
  系统最多支持多少用户访问、系统最大业务处理量是多少
  系统性能可能存在的瓶颈在哪里
  更换那些设备可以提高性能
  系统能否支持7×24小时的业务访问
3 开发（设计）人员角度
  架构设计是否合理
  数据库设计是否合理
  代码是否存在性能方面的问题
  系统中是否有不合理的内存使用方式
  系统中是否存在不合理的线程同步方式
  系统中是否存在不合理的资源竞争
4 性能测试工程师的角度
（1）  响应时间：对请求作出响应所需要的时间
  网络传输时间：N1+N2+N3+N4
  应用服务器处理时间：A1+A3
  数据库服务器处理时间：A2
  响应时间=N1+N2+N3+N4+A1+A3+A2
（2） 并发用户数的计算公式
  系统用户数：系统额定的用户数量，如一个OA系统，可能使用该系统的用户总数是5000个，那么这个数量，就是系统用户数
  同时在线用户数：在一定的时间范围内，最大的同时在线用户数量
  平均并发用户数的计算：C=nL / T  ？？？
  其中C是平均的并发用户数，n是平均每天访问用户数（login session），L是一天内用户从登录到退出的平均时间（login session的平均时间），T是考察时间长度（一天内多长时间有用户使用系统）
  并发用户数峰值计算：C^约等于C + 3*根号C
  其中C^是并发用户峰值，C是平均并发用户数，该公式遵循泊松分布理论。
（3）吞吐量的计算公式
指单位时间内系统处理用户的请求数
从业务角度看，吞吐量可以用：请求数/秒、页面数/秒、人数/天或处理业务数/小时等单位来衡量
从网络角度看，吞吐量可以用：字节/秒来衡量
以不同方式表达的吞吐量可以说明不同层次的问题，
例如，以字节数/秒方式可以表示数要受网络基础设施、服务器架构、应用服务器制约等方面的瓶颈；已请求数/秒的方式表示主要是受应用服务器和应用代码的制约体现出的瓶颈。
当没有遇到性能瓶颈的时候，吞吐量与虚拟用户数之间存在一定的联系，可以采用以下公式计算：F=VU * R / T
其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间
（4）性能计数器
进程对于硬件资源的利用情况。例如，linux平台下的top命令输出。
（5）思考时间的计算公式
Think Time，从业务角度来看，这个时间指用户进行操作时每个请求之间的时间间隔，而在做新能测试时，为了模拟这样的时间间隔，引入了思考时间这个概念，来更加真实的模拟用户的操作。
在吞吐量这个公式中F=VU * R / T说明吞吐量F是VU数量、每个用户发出的请求数R和时间T的函数，而其中的R又可以用时间T和用户思考时间TS来计算：R = T / TS
下面给出一个计算思考时间的一般步骤：
A、首先计算出系统的并发用户数
C=nL / T F=R×C
B、统计出系统平均的吞吐量
F=VU * R / T R×C = VU * R / T
C、统计出平均每个用户发出的请求数量
R=u*C*T/VU
D、根据公式计算出思考时间
TS=T/R


四 指标解释
--并发用户数
并发一般分为2种情况。一种是严格意义上的并发，
即所有的用户在同一时刻做同一件事情或者操作，这种操作一般指做同一类型的业务。比如在信用卡审批业务中，一定数目的拥护在同一时刻对已经完成的审批业务进行提交；还有一种特例，即所有用户进行完全一样的操作，例如在信用卡审批业务中，所有的用户可以一起申请业务，或者修改同一条记录。 
另外一种并发是广义范围的并发。这种并发与前一种并发的区别是，尽管多个用户对系统发出了请求或者进行了操作，但是这些请求或者操作可以是相同的，也可以是不同的。对整个系统而言，仍然是有很多用户同时对系统进行操作，因此也属于并发的范畴。 
可以看出，后一种并发是包含前一种并发的。而且后一种并发更接近用户的实际使用情况，因此对于大多数的系统，只有数量很少的用户进行“严格意义上的并发”。对于WEB性能测试而言，这2种并发情况一般都需要进行测试，通常做法是先进行严格意义上的并发测试。严格意义上的用户并发一般发生在使用
比较频繁的模块中，尽管发生的概率不是很大，但是一旦发生性能问题，后果很可能是致命的。严格意义上的并发测试往往和功能测试
关联起来，因为并发功能遇到异常通常都是程序问题，这种测试也是健壮性和稳定性测试的一部分。
用户并发数量：关于用户并发的数量，有2种常见的错误观点。 
一种错误观点是把并发用户数量理解为使用系统的全部用户的数量，理由是这些用户可能同时使用系统；还有一种比较接近正确的观点是把在线用户数量理解为并发用户数量。实际上在线用户也不一定会和其他用户发生并发，例如正在浏览网页的用户，对服务器没有任何影响，但是，在线用户数量是计算并发用户数量的主要依据之一。

--吞吐量
指的是在一次性能测试过程中网络上传输的数据量的总和
.吞吐量/传输时间,就是吞吐率. 

--点击数PV
每秒钟用户向WEB服务器提交的HTTP请求数.这个指标是WEB应用特有的一个指标:WEB 应用是"请求-响应"模式,用户发出一次申请,服务器就要处理一次,
所以点击是WEB应用能够处理的交易的最小单位.
如果把每次点击定义为一个交易,点击率和TPS就是一个概念.容易看出,点击率越大,对服务器的压力越大.点击率只是一个性能参考指标,重要的是分析点击时产生的影响。
需要注意的是,这里的点击并非指鼠标的一次单击操作,因为在一次单击操作中,客户端可能向服务器发出多个HTTP请求.






  