Spring
##########################
1 设计模式
##########################
key point：
在java中，“设计”是针对类的。
设计的关键：类决定了内存中的对象，主程序的逻辑就是使用这些对象完成功能。
指定对象之间的交互规则（调用关系）。
每种设计模式通常会对应一个或多个用于实现这个模式的“模式类”，比如工厂类、适配器类、包装器类、代理类、模板抽象类。
https://www.cnblogs.com/hwaggLee/p/4510687.html
1.1 创建对象相关模式
https://www.cnblogs.com/yuefan/p/3763898.html
(1)工厂方法（Factory Method）
通常由应用程序直接使用new创建新的对象，为了将对象的创建和使用相分离，采用工厂模式,即应用程序将对象的创建及初始化职责交给工厂对象。
(2)单例模式（Singleton）
保证一个类仅有一个实例，并提供一个访问它的全局访问点。 
spring中的单例模式完成了后半句话，即提供了全局的访问点BeanFactory。但没有从构造器级别去控制单例，这是因为spring管理的是是任意的java对象。 
1.2 对象行为修改相关模式
(3)适配器（Adapter）
在Spring的Aop中，使用的Advice（通知）来增强被代理类的功能。Spring实现这一AOP功能的原理就使用代理模式（1、JDK动态代理。2、CGLib字节码生成技术代理。）
对类进行方法级别的切面增强，即，生成被代理类的代理类， 并在代理类的方法前，设置拦截器，通过执行拦截器重的内容增强了代理方法的功能，实现的面向切面编程。
(4)包装器（Decorator）
spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。基本上都是动态地给一个对象添加一些额外的职责。 
(5)代理（Proxy）
为其他对象提供一种代理以控制对这个对象的访问。  从结构上来看和Decorator模式类似，但Proxy是控制，更像是一种对功能的限制，而Decorator是增加职责。 
spring的Proxy模式在aop中有体现，比如JdkDynamicAopProxy和Cglib2AopProxy
(6)观察者（Observer）
定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
spring中Observer模式常用的地方是listener的实现。如ApplicationListener。
(7)策略（Strategy）
定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。 
spring中在实例化对象的时候用到Strategy模式
(8)模板方法
定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
Template Method模式一般是需要继承的。
这里想要探讨另一种对Template Method的理解。
spring中的JdbcTemplate，在用这个类时并不想去继承这个类，因为这个类的方法太多，但是我们还是想用到JdbcTemplate已有的稳定的、公用的数据库连接，那么我们怎么办呢？
我们可以把变化的东西抽出来作为一个参数传入JdbcTemplate的方法中。
但是变化的东西是一段代码，而且这段代码会用到JdbcTemplate中的变量。
怎么办？那我们就用回调对象吧。
在这个回调对象中定义一个操纵JdbcTemplate中变量的方法，我们去实现这个方法，就把变化的东西集中到这里了。
然后我们再传入这个回调对象到JdbcTemplate（当然，这需要jdbcTemplate的代码中调用回调对象的方法），从而完成了调用。 

##########################
2 核心原理
##########################
Spring目的：通过配置构建对象之间的依赖关系。通过AOP增加bean的功能。
就是让对象与对象（模块与模块）之间的关系没有通过代码来关联。都是通过配置类说明管理的（Spring根据这些配置 内部通过反射去动态的组装对象） 

核心原理：
(1)IOC （对象的创建、对象之间依赖关系的管理）
动态注入，让一个对象的创建不用new了，可以自动的生产。
这其实就是利用java里的反射机制。
反射其实就是在运行时动态的去创建、调用对象。
Spring就是在运行时，根据配置（xml或者annotation）来动态的创建对象，和调用对象里的方法的。
(2)AOP （对象功能的增强）
为某一类对象 进行监督和控制，在调用这类对象的具体方法的前后去调用你指定的方法，从而达到对一个方法扩充的功能。
本质上是代理模式，为原对象生成了代理对象。
AOP是装饰器模式的一种。spring使用1、JDK动态代理。2、CGLib字节码生成技术代理。
(3)java动态代理
http://blog.csdn.net/heyutao007/article/details/49738887
AOP的拦截功能是由java中的动态代理来实现的。
说白了，就是在目标类的基础上增加切面逻辑，生成增强的目标类（该切面逻辑或者在目标类函数执行之前，或者目标类函数执行之后，或者在目标类函数抛出异常时候执行。
不同的切入时机对应不同的Interceptor的种类，如BeforeAdviseInterceptor，AfterAdviseInterceptor以及ThrowsAdviseInterceptor等）。
java动态代理API
UserService userService = new UserServiceImpl();  
InvocationHandler invocationHandler = new MyInvocationHandler(userService);  
UserService userServiceProxy =
(UserService)Proxy.newProxyInstance(userService.getClass().getClassLoader(),   userService.getClass().getInterfaces(), invocationHandler);

public class MyInvocationHandler implements InvocationHandler {  
    private Object target;  
    MyInvocationHandler() {  
        super();  
    }  
    MyInvocationHandler(Object target) {  
        super();  
        this.target = target;  
    }  
    @Override  
    public Object invoke(Object o, Method method, Object[] args) throws Throwable {  
        if("getName".equals(method.getName())){  
            System.out.println("++++++before " + method.getName() + "++++++");  
            Object result = method.invoke(target, args);  
            System.out.println("++++++after " + method.getName() + "++++++");  
            return result;  
        }else{  
            Object result = method.invoke(target, args);  
            return result;  
        }  
  
    }  
}  

##########################
3 Spring 应用
##########################
spring boot 
目的：helps you accelerate and facilitate application development
(1)spring boot 会自动构建出spring容器，并把需要的对象创建出来，设置好依赖关系。
(2)智能判断需要在IOC容器中添加哪些对象
(3)At the same time, Spring Boot doesn’t get in your way.For example, if Thymeleaf is on your path, Spring Boot adds a SpringTemplateEngine to your application context automatically. 
But if you define your own SpringTemplateEngine with your own settings, then Spring Boot won’t add one. This leaves you in control with little effort on your part.
(4)Spring Boot doesn’t generate code or make edits to your files. Instead, when you start up your application, Spring Boot dynamically wires up beans and settings and applies them to your application context.
原理：
(1)It looks at your classpath and at beans you have configured, makes reasonable assumptions about what you’re missing, and adds it. 
(2)@SpringBootApplication
@Configuration
@EnableAutoConfiguration
@ComponentScan
(3)The main() method uses Spring Boot’s SpringApplication.run() method to launch an application. 



应用场景
 
 
spring MVC
Spring Web MVC框架也是一个基于请求驱动的Web框架
使用了前端控制器模式来进行设计，再根据请求映射规则分发给相应的页面控制器（动作/处理器）进行处理。
spring MVC核心组件：
(1)前端控制器（请求分发器）:org.springframework.web.servlet.DispatcherServlet
(2)请求映射规则：使用注解的方式配置在Controller的方法中
(3)请求处理器：@Controller注解的类。一个请求处理器会负责处理一组url映射。
(4)视图模板：thymleaf、jsp模板文件，+一些静态css、js资源

Spring Security
Spring BATCH
结合etl shell脚本谈谈



##########################
4 Spring 的一些思考
##########################
(1)注解、xml都表达了对应用程序的配置。那么，这些配置是如何被读取的，又是如何影像应用程序的。
注解是通过反射API获取的。class文件被加载后，注解的信息也被放到了clazz对象中。


##########################
5 Spring cloud
##########################
（1）Spring Cloud Config Server
用途：为其他spring boot app提供配置信息。将配置信息集中管理。
数据结构：配置信息本质上是key-value结构。配置文件存放配置信息。容器repository（git）存放配置文件。
信息交互：spring boot app 可以通过配置config server，在启动时从config server中获取配置信息。也可以动态请求config server中变化了的信息。
内部结构：@EnableConfigServer
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-config-server</artifactId>
    </dependency>	



