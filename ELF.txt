1 命令视角
1.1 创建静态库
(1)源文件：
[root@MyCentOS7 libvector]# cat addvec.c
int addcnt = 0;

void addvec(int *x , int *y, int *z, int n){
        int i;

        addcnt++;

        for(i = 0;i < n; i++){
                z[i] = x[i] + y[i];
        }
}

[root@MyCentOS7 libvector]# cat mulvec.c
int multcnt = 0 ;

void multvec(int *x,int *y,int *z,int n){
        int i;

        multcnt++;

        for(i = 0;i < n; i++){
                z[i] = x[i] * y[i];
        }
}
(2)编译源文件，得到目标文件
[root@MyCentOS7 libvector]# gcc -c addvec.c mulvec.c
(3)创建静态库 ，ar指令
[root@MyCentOS7 libvector]# ar rcs libvector.a addvec.o mulvec.o

1.2 使用静态库
(1)使用静态库的源文件main2.c ,注意，这里需要为静态库创建一个头文件vector.h，这样才能编译main2.c 
[root@MyCentOS7 libvector]# cat main2.c
#include <stdio.h>
#include "vector.h"

int x[2] = {1,2};
int y[2] = {3,4};
int z[2];

int main(){
        addvec(x,y,z,2);
        printf("z = [ %d %d ] \n",z[0],z[1]);
    return 0;
}
(2)编译使用了静态库的文件，并没有什么特殊
[root@MyCentOS7 libvector]# gcc -c main2.c
(3)链接静态库。由于main2.o目标文件中的符号表中包含了静态库中的符号，所以要在链接时指明静态库
[root@MyCentOS7 libvector]# gcc -o prog2c main2.o libvector.a 
这里需要注意一下，csapp给出的参数static 在执行时报错。
[root@MyCentOS7 libvector]# gcc -static -o prog2c main2.o libvector.a 
/usr/bin/ld: cannot find -lc
collect2: error: ld returned 1 exit status

1.3 创建动态库和使用动态库
(1)利用源文件编译得到动态库libvector.so
[root@MyCentOS7 libvector]# gcc -shared -fpic -o libvector.so addvec.c mulvec.c
(2)利用共享库编译源文件得到可执行文件
[root@MyCentOS7 libvector]# gcc -o prog21 main2.c libvector.so 注意，这种编译方式得到的可执行文件在执行时报错。
[root@MyCentOS7 libvector]# ./prog21
./prog21: error while loading shared libraries: libvector.so: cannot open shared object file: No such file or directory
csapp中给出的编译方式如下，可以正常运行
[root@MyCentOS7 libvector]# gcc -o prog21 main2.c ./libvector.so 
[root@MyCentOS7 libvector]# ./prog21 
z = [ 4 6 ] 

2 重要概念
2.1 符号解析
涉及数据结构：符号表。
由汇编器生成，readelf -s 目标文件  可查看

2.2 符号重定位
由连接器完成。
涉及数据结构：重定位条目。重定位条目由汇编器生成，使用readelf -r 目标文件 查询
连接器根据重定位条目，把每个符号引用的实际内存地址写入对应的位置。


3 ELF 文件格式
文件开始处是一个 ELF 头部(ELF Header)，用来描述整个文件的组织。节区部 分包含链接视图的大量信息:指令、数据、符号表、重定位信息等等。

[root@MyCentOS7 ch07]# readelf -h prog
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x400400
  Start of program headers:          64 (bytes into file)
  Start of section headers:          4456 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         30
  Section header string table index: 27

[root@MyCentOS7 ch07]# readelf -h main.o
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          288 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           64 (bytes)
  Number of section headers:         12
  Section header string table index: 9  

节区头部表
ELF 头部中，e_shoff 成员给出从文件头到节区头部表格的偏移字节数;e_shnum 给出表格中条目数目;
e_shentsize 给出每个项目的字节数。从这些信息中可以确切地定 位节区的具体位置、长度。
[root@MyCentOS7 ch07]# readelf -S main.o
There are 12 section headers, starting at offset 0x120:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000018  0000000000000000  AX       0     0     4
  [ 2] .rela.text        RELA             0000000000000000  00000540
       0000000000000030  0000000000000018          10     1     8
  [ 3] .data             PROGBITS         0000000000000000  00000058
       0000000000000008  0000000000000000  WA       0     0     4
  [ 4] .bss              NOBITS           0000000000000000  00000060
       0000000000000000  0000000000000000  WA       0     0     4
  [ 5] .comment          PROGBITS         0000000000000000  00000060
       000000000000002d  0000000000000001  MS       0     0     1
  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  0000008d
       0000000000000000  0000000000000000           0     0     1
  [ 7] .eh_frame         PROGBITS         0000000000000000  00000090
       0000000000000030  0000000000000000   A       0     0     8
  [ 8] .rela.eh_frame    RELA             0000000000000000  00000570
       0000000000000018  0000000000000018          10     7     8
  [ 9] .shstrtab         STRTAB           0000000000000000  000000c0
       0000000000000059  0000000000000000           0     0     1
  [10] .symtab           SYMTAB           0000000000000000  00000420
       0000000000000108  0000000000000018          11     8     8
  [11] .strtab           STRTAB           0000000000000000  00000528
       0000000000000017  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

  
[root@MyCentOS7 ch07]# readelf -S prog
There are 30 section headers, starting at offset 0x1168:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400238  00000238
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254
       0000000000000020  0000000000000000   A       0     0     4
  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298
       000000000000001c  0000000000000000   A       5     0     8
  [ 5] .dynsym           DYNSYM           00000000004002b8  000002b8
       0000000000000048  0000000000000018   A       6     1     8
  [ 6] .dynstr           STRTAB           0000000000400300  00000300
       0000000000000038  0000000000000000   A       0     0     1
  [ 7] .gnu.version      VERSYM           0000000000400338  00000338
       0000000000000006  0000000000000002   A       5     0     2
  [ 8] .gnu.version_r    VERNEED          0000000000400340  00000340
       0000000000000020  0000000000000000   A       6     1     8
  [ 9] .rela.dyn         RELA             0000000000400360  00000360
       0000000000000018  0000000000000018   A       5     0     8
  [10] .rela.plt         RELA             0000000000400378  00000378
       0000000000000030  0000000000000018   A       5    12     8
  [11] .init             PROGBITS         00000000004003a8  000003a8
       000000000000001a  0000000000000000  AX       0     0     4
  [12] .plt              PROGBITS         00000000004003d0  000003d0
       0000000000000030  0000000000000010  AX       0     0     16
  [13] .text             PROGBITS         0000000000400400  00000400
       00000000000001a4  0000000000000000  AX       0     0     16
  [14] .fini             PROGBITS         00000000004005a4  000005a4
       0000000000000009  0000000000000000  AX       0     0     4
  [15] .rodata           PROGBITS         00000000004005b0  000005b0
       0000000000000010  0000000000000000   A       0     0     8
  [16] .eh_frame_hdr     PROGBITS         00000000004005c0  000005c0
       000000000000003c  0000000000000000   A       0     0     4
  [17] .eh_frame         PROGBITS         0000000000400600  00000600
       0000000000000104  0000000000000000   A       0     0     8
  [18] .init_array       INIT_ARRAY       0000000000600e10  00000e10
       0000000000000008  0000000000000000  WA       0     0     8
  [19] .fini_array       FINI_ARRAY       0000000000600e18  00000e18
       0000000000000008  0000000000000000  WA       0     0     8
  [20] .jcr              PROGBITS         0000000000600e20  00000e20
       0000000000000008  0000000000000000  WA       0     0     8
  [21] .dynamic          DYNAMIC          0000000000600e28  00000e28
       00000000000001d0  0000000000000010  WA       6     0     8
  [22] .got              PROGBITS         0000000000600ff8  00000ff8
       0000000000000008  0000000000000008  WA       0     0     8
  [23] .got.plt          PROGBITS         0000000000601000  00001000
       0000000000000028  0000000000000008  WA       0     0     8
  [24] .data             PROGBITS         0000000000601028  00001028
       000000000000000c  0000000000000000  WA       0     0     4
  [25] .bss              NOBITS           0000000000601034  00001034
       0000000000000004  0000000000000000  WA       0     0     4
  [26] .comment          PROGBITS         0000000000000000  00001034
       000000000000002c  0000000000000001  MS       0     0     1
  [27] .shstrtab         STRTAB           0000000000000000  00001060
       0000000000000108  0000000000000000           0     0     1
  [28] .symtab           SYMTAB           0000000000000000  000018e8
       0000000000000648  0000000000000018          29    46     8
  [29] .strtab           STRTAB           0000000000000000  00001f30
       0000000000000234  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)
  
