1、为什么c语言中的变量需要指定“类型”？
因为机器指令中，操作数是有长度限制的。cpu的寄存器可以存放1、2、4、8字节的数据（%al,%ax,%eax,%rax）。
如果不指明变量类型，例如语句 a=10;那么编译器将无法准确判断如何选择对应指令的操作数类型。
1-1、为什么指针需要指定类型？
在x86-64指令架构中，地址为quadword即8字节的数据。指针的本质就是地址，所以指针的长度是固定的。
之所以还要为指针声明类型，是因为指针指向的内存地址的数据需要确定一个长度。
编译器需要根据指针的类型，来决定指针运算时的“伸缩量”。例如 int *p ; 那么p+1将被处理成p的地址加上4个字节。

2 coding model编程模型
开发者编写了一个函数A，但是函数A的运行时机与运行方式是由程序框架决定的。
好多时候编程都是针对框架的编程，框架定义了一组程序调度的规则，开发者按照框架的要求实现一些具体的程序单元，然后这些单元又被框架调用。
做一个理解框架运行原理的coder。
框架与客户端程序交互的方式：接口调用。例如servlet容器对于sevlet接口实现类的调用。
tomcat通过web.xml加载特定项目的servlet，filter等客户程序。

3 语境
站在解释器的角度去看一行代码。关键字确定一个语境。
例如，class Model(dict, metaclass=ModelMetaclass):
class关键字确定了这行代码是一个类的定义，Model是类名，dict是父类，metaclass指明了类构造时要执行的一段代码

4 如何研究一个程序？
（0）功能角度，做什么的
（1）从操作系统角度，可以利用进程模型进行研究。
（2）从数据结构角度，可以研究下程序提供了哪些数据，数据是如何组织的。
（3）从交互的角度，如何跟程序通信？
（4）程序内部的逻辑结构。

5 如何复用程序？
被复用的程序处于哪种形态：
(1)二进制形态:可独立运行，表现为独立的进程、端口号等系统级属性，例如微服务。
(2)代码库形态:例如jar包，或者语言本身提供的类库，或者maven管理的项目依赖等。
(3)源代码形态:可以得到源代码的程序，需要跟项目代码一起编译运行。
复用的方式（程序的配置接口）
(1)配置文件
(2)命令行启动参数
(3)源代码中调用

6 程序的形态
程序=数据结构+算法。
这种定义的出发点是：程序要由某个“执行机器”执行。程序是这个执行机器的输入。程序中的信息在机器看来分成两种，一种信息映射为“机器指令”，另外一种信息映射为逻辑上的需要处理的数据。
这种定义的视角，既符合机器的工作原理，也符合开发人员的逻辑视角。
例如，一条汇编指令：mov ax,[sp] 
这条指令由x86 CPU硬件执行。数据结构为cpu寄存器ax和内存位置[sp]。算法是由机器实现的数据拷贝。
CPU的指令集规定了一组由硬件提供的“算法”，这组算法是硬件工作细节的封装，将硬件能力打包成一组API，是所有高级语言的基础。汇编语言是机器指令的一种人类可读形态。
(1)机器指令形态
执行机器：硬件平台(cpu、内存、总线)。cpu作为指令的执行引擎，从内存中获取指令，然后执行指令。
存储格式：二进制格式（不一定是文件，因为在机器指令级别还没有文件的概念）。并非一定存储在硬盘上，例如开机引导程序是存放在bios中的一段烧制的机器指令。cpu加电后会把读取指令的位置初始化为引导程序的入口地址。
加载方式：cpu寻址。这是根本的程序加载原理。是操作系统提供的加载接口的底层实现。
(2)操作系统可执行文件形态
例如，ELF文件，EXE文件
执行机器：操作系统
存储格式：二进制文件
加载方式：操作系统
(3)字节码形态
执行机器：虚拟机
存储格式：二进制
加载方式：虚拟机
(4)源代码形态
执行机器：编译器或解释器
存储格式：文本文件

7 工程化思想

8 api设计





