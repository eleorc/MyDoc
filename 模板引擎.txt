模板引擎
https://www.zhihu.com/question/32524504?sort=created
首先要区分出（传统的）string-based模板引擎和（新潮的）dom-based模板引擎。
string based模板引擎的目标是输出字符串，几乎是所有时候，它的输入也是字符串，也就是所谓的模板。
dom-based模板引擎，通常输出就直接是dom了（当然，很多dom-based模板引擎也可以很方便的挂载string输出端，从而在服务端也能输出），输入也不一定，可能就是已经存在的DOM树（比如AngularJS直接写在页面上的时候），可能是字符串（如AngularJS使用字符串模板的时候）也可能是它们自己定义的某种语言（比如React之于JSX）。
dom-based模板引擎基本上不考虑输出HTML/XML以外的东西
相比之下dom-based模板引擎可以实现像Matt-Esch/virtual-dom · GitHub这类的东西，在数据更新的时候实现最小操作，并不像string-based模板引擎那样，可能改了一个值就要重新生成巨大的一部分字符串。

作者：Jim Liu
链接：https://www.zhihu.com/question/32524504/answer/55971415
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


作者：尤雨溪
链接：https://www.zhihu.com/question/32524504/answer/55812327
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

严格的模板引擎的定义，输入模板字符串 + 数据，得到渲染过的字符串。实现上，从正则替换到拼 function 字符串到正经的 AST 解析各种各样，但从定义上来说都是差不多的。
字符串渲染的性能其实也就在后端比较有意义，毕竟每一次渲染都是在消耗服务器资源，但在前端，用户只有一个，几十毫秒的渲染时间跟请求延迟比起来根本不算瓶颈。
倒是前端的后续更新是字符串模板引擎的软肋，因为用渲染出来的字符串整个替换 innerHTML 是一个效率很低的更新方式。
所以这样的模板引擎如今在纯前端情境下已经不再是好的选择，意义更多是在于方便前后端共用模板。相比之下 Angular 是 DOM-based templating，直接解析 live DOM 来提取绑定，如果是字符串模板则是先转化成 live DOM 再解析。
数据更新的时候直接通过绑定做局部更新。其他 MVVM 如 Knockout, Vue, Avalon 同理。缺点是没有现成的服务端渲染，要做服务端渲染基本等于重写一个字符串模板引擎。
不过其实也不难，因为 DOM-based 的模板都是合法的 HTML，直接用现成的 HTML parser 预处理一下，后面的工作就相对简单了。