
###[part 1] the language

[item 1]class关键字
class Model(dict, metaclass=ModelMetaclass):class关键字确定了这行代码是一个类的定义，Model是类名，dict是父类，metaclass指明了类构造时要执行的一段代码

[item 2]特殊方法
格式为__xxx__的方法是特殊方法，该方法由python解释器根据特殊的语句触发。例如，class语境中定义的方法 def __init__(self, **kw)，将由创建类的对象时执行。
__init__(self, **kw)==>创建类对象时执行
__getattr__(self, key)==>执行.运算符时触发，例如s.name
__setattr__(self, key, value)==>属性赋值时触发

[item 3]self关键字(也许不是关键字)？或者说类似于java中的this
class语境中的函数定义，所有函数的第一个变量，如果写成self，那么是对当前实例的引用。

[item 4]函数的参数
命名关键字参数：
如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
def person(name, age, *, city, job):
    print(name, age, city, job)
如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：
def person(name, age, *args, city, job):
    print(name, age, args, city, job)
命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：
使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python解释器将无法识别位置参数和命名关键字参数
	
###[part 2] 机制

[item 1]metaclass
Python解释器在加载一个class定义时，会创建一个内存中的class对象cls，代表这个class定义。
如果class的定义包含关键字metaclass，例如，class Model(dict, metaclass=ModelMetaclass):
这时，python解释器会把创建好的class对象cls传入metaclass指向的class定义中，并执行一个特殊方法def __new__(cls, name, bases, attrs):
例如上面的例子，在加载Model时就会执行这个方法，cls为Model的内存对象。name为'Model',bases是Model的父类tuple,attrs是Model中定义的所有属性。
需要注意的是，Model类的所有子类，在被加载时，也会调用__new__(cls, name, bases, attrs)，并且传入的cls是对应的子类的实例。
测试metaclass的运行时机
class StudentMetaClass(type):
    def __new__(cls, name, bases, attrs):
      print('print metaclass __new__ method parameters')	
      print('cls ==> %s' % cls)
      print('name ==> %s' % name)
      print('bases ==> %s' % bases)
      print('attrs ==> %s' % attrs)
      return type.__new__(cls, name, bases, attrs)
class Student(dict,metaclass=StudentMetaClass):
    print('load class Student')
    id = '1'
    def dosomething():
      pass
输出为：
load class Student
print metaclass __new__ method parameters
cls ==> <class '__main__.StudentMetaClass'>
name ==> Student
bases ==> <class 'dict'>
attrs ==> {'__module__': '__main__', 'id': '1', 'dosomething': <function Student
.dosomething at 0x0000000000A6D620>, '__qualname__': 'Student'}
结论：
(1)python在加载class语句块时，语句块内的每一行代码都会被执行。
(2)如果class指定了metaclass关键字，那么python解释器会去执行metaclass对应类的__new__方法。
(3)__new__方法最后需要使用type.__new__(cls, name, bases, attrs)返回,否则类型没有创建成功。
(4)__new__的参数中，第一个参数cls的值是metaclass类型
(5)class中定义的函数，也会被放进attrs中

[item 2]Coroutine
协程，属于一种特殊的函数调用机制。
描述性解释：函数A先调用函数B，B返回后，A继续调用函数C。这是通常的函数调用流程。
在单线程普查函数调用过程中，如果A调用B，在B的执行过程中，有一个耗时的操作指令（比如IO），那么A会等待B完成，然后继续。
协程不是这样，在单线程函数调用过程中，A调用B，B的执行过程可以中断（通过发送一个事件x中断），使得A可以继续执行后面的代码，比如调用C。
事件x会被某种机制处理，处理完成后会发送一个通知给A，这样A可以继续B中断之后的代码。
如果函数B满足这种特性，那么B就是一个协程。
如何运行python协程（coroutine）
import asyncio
import aiomysql
async def create_pool(loop, **kw):
    print('create database connection pool...')
    global __pool
    __pool = await aiomysql.create_pool(
        host=kw.get('host', '192.168.255.128'),
        port=kw.get('port', 3306),
        user=kw['user'],
        password=kw['password'],
        db=kw['db'],
        charset=kw.get('charset', 'utf8'),
        autocommit=kw.get('autocommit', True),
        maxsize=kw.get('maxsize', 10),
        minsize=kw.get('minsize', 1),
        loop=loop
    )
    print('pool created...')
loop = asyncio.get_event_loop()
coro = create_pool(loop,user='root',password='root',db='test')
loop.run_until_complete(coro)

[item 3]装饰器模式
###code
def get(path):
    print('path is %s' % path)

@get('index')
def test():
    print('test')
###code
以上代码会输出预期的字符串，然后报错：
path is index
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not callable

python解释器在处理符号@时，会预期@后面是一个高阶函数(函数会返回一个函数)，并且python解释器会自动调用返回的函数
###code
def get(path):
    print('path is %s' % path)
    def a_func():
        print('a_func is a func')
    return a_func

@get('index')
def test():
    print('test')
###code
###output 
path is index
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: a_func() takes 0 positional arguments but 1 was given
###output
从输出可以看到，python解释器确实调用了函数a_func，并且为这个调用传递了一个参数！但是上面的代码中，a_func并没有定义为接收一个参数，框架实际的调用与函数中的定义不匹配，所以报错了。
###code
def get(path):
    print('path is %s' % path)
    def a_func(func):
        print('a_func is a func')
        print('func type is %s , func name is %s' % (type(func),func.__name__))
    return a_func

@get('index')
def test():
    print('test')
###code
###output
path is index
a_func is a func
func type is <class 'function'> , func name is test
###output
这里，代码可以运行，并且不报错了。
###小结
python解释器对于
@xxx
func()
语句块的处理。
(1)调用函数xxx
(2)函数xxx必须返回一个函数yyy
(3)调用yyy(func)

如果装饰器模式需要返回一个函数，那么在a_func中需要再定义一个函数，并返回。
###code
def get(path):
    print('path is %s' % path)
    def a_func(func):
        print('a_func is a func')	
        def wrapper(*args,**kw):	
            print('wrapper do something')
            func(*args,**kw)
        return wrapper 
    return a_func

@get('index')
def test(s):
    print('test %s' % s)
###code
###output
path is index
a_func is a func
###output
python在处理上面的代码块时，返回了一个函数wrapper，这时，test这个函数在内存中的数据其实已经被wrapper替代。
test==>wrapper
func==>原理的test，即代码为print('test %s' % s)
可以验证test的name属性，test.__name__值为'wrapper'
###小结
(4)这个语句块整体返回一个函数，test是函数引用，但是函数对象已经被替换成wrapper中的内容。

###code
def get(path):
    print('path is %s' % path)
    def a_func(func):
        print('a_func is a func')	
        @functools.wraps(func)		
        def wrapper(*args,**kw):	
            print('wrapper do something')
            func(*args,**kw)
        return wrapper 
    return a_func

@get('index')
def test(s):
    print('test %s' % s)
###code

###总结
(1)python解释器对于
@xxx
func()
语句块的处理。调用函数xxx,函数xxx必须返回一个函数yyy,调用yyy(func)
(2)装饰器模式中，这种语句块返回了一个增强版的函数。这个函数的内容由xxx中的wrapper函数定义。

###code
def get(path):
    print('path is %s' % path)
    def a_func(func):
        print('a_func is a func')	
        @functools.wraps(func)		
        def wrapper(*args,**kw):	
            print('wrapper do something')
            func(*args,**kw)
        return wrapper 
    return a_func

@get
def test(s):
    print('test %s' % s)
###code
注意，如果是@xxx不带参数，那么python解释器会把函数test作为参数，调用xxx(func)。

如何定义一个get函数，可以支持@get 和 @get('path')两种情况
###code
import types
import functools
def get(path):
    def a_func(func):
        print('a_func is a func')	
        @functools.wraps(func)		
        def wrapper(*args,**kw):	
            print('wrapper do something')
            func(*args,**kw)
        return wrapper 
    if type(path)==types.FunctionType:
        return a_func(path)
    else:
        return a_func

@get
def test(s):
    print('test %s' % s)
	
@get('index')
def test(s):
    print('test %s' % s)
###code

###[part 3] 框架
[item 1]aiohttp
###code
import logging; logging.basicConfig(level=logging.INFO)
import asyncio, os, json, time
from datetime import datetime
from aiohttp import web

def index(request):
    return web.Response(body=b'<h1>Awesome</h1>')

@asyncio.coroutine
def init(loop):
    app = web.Application(loop=loop)
    app.router.add_route('GET', '/', index)
    srv = yield from loop.create_server(app.make_handler(), '127.0.0.1', 9000)
    logging.info('server started at http://127.0.0.1:9000...')
    return srv

loop = asyncio.get_event_loop()
loop.run_until_complete(init(loop))
loop.run_forever()
###code
web框架的核心业务：
(1)注册url处理函数，把url映射到处理函数，并传递request对象
(2)使web框架对象成为tcp server的处理器
request对象的流经的对象
浏览器==>tcp server==>aiohttp webapp==>url handler function 
增加一个组件，RequestHandler，用于接受requet对象，调用url handler function 。
定义RequestHandler
URL处理函数不一定是一个coroutine，因此我们用RequestHandler()来封装一个URL处理函数。
RequestHandler是一个类，由于定义了__call__()方法，因此可以将其实例视为函数，
这样可以把RequestHandler实例通过app.router.add_route('GET', '/', requestHandler)注册到app对象中。
RequestHandler目的:
(1)从URL函数中分析其需要接收的参数
(2)从request中获取必要的参数
(3)调用URL函数
(4)?然后把结果转换为web.Response对象?
###小结
request对象的旅程
srv对象创建request对象，reuqest对象被传递给拦截器middlewares
    app = web.Application(loop=loop, middlewares=[
        logger_factory, logger_factory,response_factory
    ])
依次经过每一个拦截器，
最后一个拦截器会把request对象交给 AbstractRoute对象，这个对象会根据app中注册的路由信息
app.router.add_route('GET', '/', index)
把请求交给用户自定义的url handler
最后一个拦截器需要将url handler的返回处理成web.Response

